uniform sampler2D texNormal;
uniform sampler2D texPos;
uniform sampler2D texRandom;
uniform sampler2D texColor;


varying vec2 uv;


// Get view position
vec3 getViewPosition(vec2 uv) {

	return texture2D(texPos, uv).xyz;
}


// Get view normal
vec3 getViewNormal(vec2 uv) {

	return texture2D(texNormal, uv).xyz * 2.0 - 1.0;
}


// Get random normal
vec2 getRandomNormal(vec2 uv) {

	return (texture2D(texRandom, vec2(800.0, 600.0) * uv / vec2(128.0, 128.0)) * 2.0 - 1.0).xy;
}


// Ambient occlusion calculation
float doAO(vec2 tcoord, vec2 offset, vec3 p, vec3 n) {

	// Control variables
	float scale = 0.8;
	float bias = 0.0;
	float intensity = 1.2;


	// Vector from current pixel to sample
	vec3 vp = getViewPosition(tcoord + offset) - p;

	vec3 nvp = normalize(vp);

	// Distance from sample to current pixel
	float d = length(vp) * scale;


	return max(0.0, dot(n, nvp) - bias) * (1.0 / (1.0 + d)) * intensity;
}


void main() {

	// 4 sample points for pixel
	vec2 sample[4];
	sample[0] = vec2(1.0, 0.0);
	sample[1] = vec2(-1.0, 0.0);
	sample[2] = vec2(0.0, 1.0);
	sample[2] = vec2(0.0, -1.0);


	// Current pixel information
	vec3 p = getViewPosition(uv);
	vec3 n = getViewNormal(uv);
	vec2 r = getRandomNormal(uv);


	// Radius control;
	float radiusControl = 1.0;
	
	float ao = 0.0;
	float radius = radiusControl / p.z;


	// Calculate ssao
	int iter = 4;
	for (int j = 0; j < iter; j++) {

		// Normal 90 degree
		vec2 c1 = reflect(sample[j], r) * radius;

		// Rotate 45 degree
		vec2 c2 = vec2(c1.x*0.707 - c1.y*0.707, c1.x*0.707 + c1.y*0.707);


		ao += doAO(uv, c1*0.25, p, n);
		ao += doAO(uv, c2*0.5, p, n);
		ao += doAO(uv, c1*0.75, p, n);
		ao += doAO(uv, c2, p, n);
	}
	ao /= iter*3.0;

	
	vec3 color = texture2D(texColor, uv).rgb;

	gl_FragData[0] = vec4((color-ao), 1.0);
}
